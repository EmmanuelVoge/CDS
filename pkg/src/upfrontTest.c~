EXPORT int JpmcdsCdsoneUpfrontChargeTest
(TDate           today,
 TDate           valueDate,
 TDate           benchmarkStartDate,  /* start date of benchmark CDS for
                                      ** internal clean spread bootstrapping */
 TDate           stepinDate, 
 TDate           startDate,
 TDate           endDate,
 double          couponRate,
 TBoolean        payAccruedOnDefault,
 TDateInterval  *dateInterval,
 TStubMethod    *stubType,
 long            accrueDCC,
 long            badDayConv,
 char           *calendar,
 TCurve         *discCurve,
 double          oneSpread,
 double          recoveryRate,
 TBoolean        payAccruedAtStart,
 double         *upfrontCharge)
{
    static char routine[] = "JpmcdsCdsoneUpfrontCharge";
    int         status    = FAILURE;

    TCurve           *flatSpreadCurve = NULL;

    flatSpreadCurve = JpmcdsCleanSpreadCurve (
        today,
        discCurve,
        benchmarkStartDate,
        stepinDate,
        valueDate,
        1,
        &endDate,
        &oneSpread,
        NULL,
        recoveryRate,
        payAccruedOnDefault,
        dateInterval,
        accrueDCC,
        stubType,
        badDayConv,
        calendar);

    if (flatSpreadCurve == NULL)
        goto done;
      
    if (JpmcdsCdsPrice(today,
                       valueDate,
                       stepinDate,
                       startDate,  /* cds can start from past */
                       endDate,
                       couponRate,
                       payAccruedOnDefault,
                       dateInterval,
                       stubType,
                       accrueDCC,
                       badDayConv,
                       calendar,
                       discCurve,
                       flatSpreadCurve,
                       recoveryRate,
                       payAccruedAtStart,
                       upfrontCharge) != SUCCESS)
        goto done;

    status = SUCCESS;

 done:

    JpmcdsFreeTCurve(flatSpreadCurve);

    if (status != SUCCESS)
        JpmcdsErrMsgFailure (routine);

    return status;
}

